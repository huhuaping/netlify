<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2-Factor authentication | Academic</title>
    <link>https://huhuaping.netlify.app/tag/2-factor-authentication/</link>
      <atom:link href="https://huhuaping.netlify.app/tag/2-factor-authentication/index.xml" rel="self" type="application/rss+xml" />
    <description>2-Factor authentication</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>huhuaping@2019</copyright><lastBuildDate>Sat, 31 Aug 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://huhuaping.netlify.app/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_2.png</url>
      <title>2-Factor authentication</title>
      <link>https://huhuaping.netlify.app/tag/2-factor-authentication/</link>
    </image>
    
    <item>
      <title>多工作设备下的git控制和使用</title>
      <link>https://huhuaping.netlify.app/2019/08/31/git-with-multiple-devices/</link>
      <pubDate>Sat, 31 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://huhuaping.netlify.app/2019/08/31/git-with-multiple-devices/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#明确自己git使用的安全环境&#34;&gt;明确自己git使用的安全环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#多设备git工作的基本流程&#34;&gt;多设备git工作的基本流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#两步验证下如何正确地clone远程repo&#34;&gt;两步验证下如何正确地clone远程repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#最后的忠告&#34;&gt;最后的忠告&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;明确自己git使用的安全环境&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;明确自己git使用的安全环境&lt;/h2&gt;
&lt;p&gt;github有多重安全条件，用户可以自行决定自己的安全等级。需要注意的是，在多台工作设备下，git需要确认不同设备的使用权限。因此，明确自己的安全环境是多设备工作的第一步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;是否开启两步验证。若开启，在一些重要的安全操作下（登陆账户或删除仓库），就需要获得实时动态密码（token）。动态密码的管理工具包括authy等。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;是否设定加密SSH。简单说，如果本地电脑采用SSH key来与服务器对话，就能省去繁复的账号密码输入过程。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;多设备git工作的基本流程&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;多设备git工作的基本流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;条件准备。主力设备A；新设备B；需要异端工作的sharerepo。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主力设备A：对sharerepo已完成工作进行push，上传到云端。add-commit-push三部曲。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新设备B：创建文件夹，并clone云端的sharerepo。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# 明确存放在本地的文件路径
$ cd /j/github/

# clone远程sharerepo到本地文件路径下
$ git clone https://github.com/huhuaping/sharerepo.git

# 进入本地sharerepo
$ cd ./sharerepo&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;工作设备下：pull-edit-add-commit-push 四部曲。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;两步验证下如何正确地clone远程repo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;两步验证下如何正确地clone远程repo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对于私有仓库，上述方法clone会提示错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;Repository not found. fatal: repository not found&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;github托管下，两步验证法要求对新设备B设定&lt;strong&gt;私有进入授权码&lt;/strong&gt;。github账号 ——&amp;gt;setting ——&amp;gt;Developer settings ——&amp;gt; personal access tokens ——&amp;gt; generate new token ——&amp;gt;勾选权限范围 ——&amp;gt; 复制授权码备用。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;gitbash中输入如下代码colone私有仓库&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# tokens 也就是上述复制备用的授权码。既不是github账户登录密码，也不是两步验证动态码！
$ git clone https://username:tokens@github.com/username/repo.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;最后的忠告&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;最后的忠告&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在任何终端设备上工作，最后都要记得对修改进行add-commit-push三部曲操作&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;云端永远保持最新状态！&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.deanbodenham.com/learn/using-git-to-sync-different-computers.html&#34;&gt;参考资料1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/25947059/git-clone-repository-not-found&#34;&gt;参考资料2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
