<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github | Academic</title>
    <link>https://huhuaping.netlify.app/tag/github/</link>
      <atom:link href="https://huhuaping.netlify.app/tag/github/index.xml" rel="self" type="application/rss+xml" />
    <description>Github</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>huhuaping@2019</copyright><lastBuildDate>Sun, 31 Jan 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://huhuaping.netlify.app/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_2.png</url>
      <title>Github</title>
      <link>https://huhuaping.netlify.app/tag/github/</link>
    </image>
    
    <item>
      <title>git版本控制实操技巧汇总</title>
      <link>https://huhuaping.netlify.app/2021/01/31/note-for-git-version-control-skills/</link>
      <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://huhuaping.netlify.app/2021/01/31/note-for-git-version-control-skills/</guid>
      <description>
&lt;script src=&#34;https://huhuaping.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#配置git&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 配置git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#常用操作&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; 常用操作&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#合并分支branch&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; 合并分支branch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#删除本地分支&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; 删除本地分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#删除远程分支&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3&lt;/span&gt; 删除远程分支&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gitbash常用文件及文件夹命令&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; gitbash常用文件及文件夹命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#常用git命令&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; 常用git命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#git-新挑战&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; git 新挑战&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#超越github文件容量限制单个文件50m以上&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5.1&lt;/span&gt; 超越github文件容量限制（单个文件50M以上）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#忽略文件设置&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5.2&lt;/span&gt; 忽略文件设置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#忽略文件无效的处理办法&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5.3&lt;/span&gt; 忽略文件无效的处理办法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#无法把本地repo推送到远程repo&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5.4&lt;/span&gt; 无法把本地repo推送到远程repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#分支push找不到上游分支&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5.5&lt;/span&gt; 分支push找不到上游分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#回到远端状态&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5.6&lt;/span&gt; 回到远端状态&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#放弃本地的修改未提交&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5.7&lt;/span&gt; 放弃本地的修改（未提交）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#git-查看commit历史&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5.8&lt;/span&gt; git 查看commit历史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#删除已提交记录中的文件并添加到ignore列表&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5.9&lt;/span&gt; 删除已提交记录中的文件并添加到ignore列表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;git版本控制技巧集锦&lt;/p&gt;
&lt;div id=&#34;配置git&#34; class=&#34;section level1&#34; number=&#34;1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 配置git&lt;/h1&gt;
&lt;p&gt;配置默认文本编辑器（text editor）。windows党还是自觉使用Notepad吧，免费又熟悉&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载安装&lt;a href=&#34;https://notepad-plus-plus.org/&#34;&gt;Notepad++&lt;/a&gt;（默认安装路径）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开GitBash，并输入如下代码&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global core.editor &amp;quot;&amp;#39;C:/Program Files (x86)/Notepad++/notepad++.exe&amp;#39; -multiInst -notabbar -nosession -noPlugin&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置合并检查工具（mergetool）。这个必须要图形化GUI的，p4merge就是一个不错的选择。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载并安装&lt;a href=&#34;https://www.perforce.com/products/helix-core-apps/merge-diff-tool-p4merge&#34;&gt;p4merge&lt;/a&gt;。默认安装路径为&lt;code&gt;&#34;C:Program Files\Perforce\p4merge.exe&#34;&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开GitBash，并输入如下代码：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global diff.tool p4merge
$ git config --global difftool.p4merge.path &amp;#39;C:\Program Files\Perforce\p4merge.exe&amp;#39;

$ git config --global merge.tool p4merge
$ git config --global mergetool.p4merge.path &amp;#39;C:\Program Files\Perforce\p4merge.exe&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;常用操作&#34; class=&#34;section level1&#34; number=&#34;2&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; 常用操作&lt;/h1&gt;
&lt;div id=&#34;合并分支branch&#34; class=&#34;section level2&#34; number=&#34;2.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; 合并分支branch&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout master
$ git merge hotfix&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;删除本地分支&#34; class=&#34;section level2&#34; number=&#34;2.2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; 删除本地分支&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ git branch -d branch_name
$ git branch -D branch_name&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;删除远程分支&#34; class=&#34;section level2&#34; number=&#34;2.3&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3&lt;/span&gt; 删除远程分支&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ git push &amp;lt;remote_name&amp;gt; --delete &amp;lt;branch_name&amp;gt;
$ git push &amp;lt;remote_name&amp;gt; :&amp;lt;branch_name&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;gitbash常用文件及文件夹命令&#34; class=&#34;section level1&#34; number=&#34;3&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; gitbash常用文件及文件夹命令&lt;/h1&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cd&lt;/code&gt;: change directory的简写，改变目录的意思，就是切换到哪个目录下， 如 cd e:切换 E 盘下面的fff 目录。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cd ..&lt;/code&gt;: 回退到上一个目录。我们在写js，引入文件时，.. 表示的就是上一个目录, 所以 cd .. 回退到上一个目录就很好理解了。注意，cd 和两个点点..之间有一个空格,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt;: print working directory, 打印工作目录，它会显示我们当前所在的目录路径。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ls&lt;/code&gt;: list, 列出当前目录中的所有文件， 只不过ll(两个ll)列出的内容更为详细。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;touch&lt;/code&gt;: 新建一个文件如 touch index.js就会在当前目录下新建一个index.js文件。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;rm&lt;/code&gt;: remove，删除一个文件, rm index.js 就会把index.js文件删除.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mkdir&lt;/code&gt;: make directory 新建一个目录,就是新建一个文件夹. 如mkdir src 新建src 文件夹.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;rm -r&lt;/code&gt; : 删除一个文件夹， r (recusive 是递归的意思)， 删除用的就是递归，先删除文件夹里面的内容，再删除文件夹。 rm -r src 删除src目录。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mv&lt;/code&gt; 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;reset&lt;/code&gt; 清屏，把git bash命令窗口中的所有内容清空。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;exit&lt;/code&gt; 可以直接退出窗口，&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;常用git命令&#34; class=&#34;section level1&#34; number=&#34;4&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; 常用git命令&lt;/h1&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;视图化查看提交历史、各个分支的指向以及项目的分支分叉情况&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;$ git log --oneline --decorate --graph --all&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;git-新挑战&#34; class=&#34;section level1&#34; number=&#34;5&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;5&lt;/span&gt; git 新挑战&lt;/h1&gt;
&lt;div id=&#34;超越github文件容量限制单个文件50m以上&#34; class=&#34;section level2&#34; number=&#34;5.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.1&lt;/span&gt; 超越github文件容量限制（单个文件50M以上）&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;挑战的问题&lt;/strong&gt;：git bash 命令push时，如果单个文件大于50M以上，则会提示推送失败。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考的解决办法&lt;/strong&gt;包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.community/t5/Support-Protips/Working-with-large-files-and-repositories/ba-p/9343&#34;&gt;Working with large files and repositories&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://help.github.com/en/articles/versioning-large-files&#34;&gt;Versioning large files&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;实际的解决办法&lt;/strong&gt;为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载安装&lt;a href=&#34;https://git-lfs.github.com/&#34;&gt;git LFS软件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# git bash下确认是否成功安装

$ git lfs install
&amp;gt; Git LFS initialized.
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;配置&lt;a href=&#34;https://help.github.com/en/articles/configuring-git-large-file-storage&#34;&gt;LFS存储策略&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# 追踪大容量文件所在的文件夹
$ git lfs track &amp;quot;data-process/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;提交并推送LFS&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# 添加文件夹
$ git add data-process/

# 提交并推送
$ git commit -m &amp;quot;add LFS directory data-process/&amp;quot;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;忽略文件设置&#34; class=&#34;section level2&#34; number=&#34;5.2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.2&lt;/span&gt; 忽略文件设置&lt;/h2&gt;
&lt;p&gt;工作思路是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在工作目录下新建&lt;code&gt;.gitigore&lt;/code&gt;文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ touch .gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;git bash调用文本编辑工具（windows死粉的notepad++），编辑并设置.gitignore文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# 配置notepad（64bit system -windows）
$ alias notepad=&amp;quot;/c/Program\ Files\ \(x86\)/Notepad++/notepad++.exe&amp;quot;

# 打开编辑器，设置忽略规则
$ notepad .gitignore&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;忽略规则的一个样例&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# ignore the whole file directory

data-raw/

# ignore Rproj user info file

.Rproj.user
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;忽略文件无效的处理办法&#34; class=&#34;section level2&#34; number=&#34;5.3&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.3&lt;/span&gt; 忽略文件无效的处理办法&lt;/h2&gt;
&lt;p&gt;有时候.gitignore里虽然进行了修改设定，但并不会马上生效。&lt;/p&gt;
&lt;p&gt;此时，问题可能就出在缓存上（cash）（&lt;a href=&#34;https://bytefreaks.net/programming-2/my-gitignore-file-is-ignored-by-git-and-it-does-not-work&#34;&gt;参看My .gitignore file is ignored by git and it does not work&lt;/a&gt;，或者参看&lt;a href=&#34;https://appuals.com/fix-gitignore-is-not-working/&#34;&gt;Gitignore is not Working&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;解决办法是清理缓存-提交：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git rm -r --cached .
$ git add .
$ git commit -m &amp;quot;Untracked files issue resolved to fix .gitignore&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;场景实例：（两台设备上）git操作时反复出现&lt;code&gt;.Rproj.user/shared/notebooks/paths&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;处理办法（&lt;a href=&#34;https://stackoverflow.com/questions/36185456/gitignored-files-still-shown-in-rstudio&#34;&gt;参考&lt;/a&gt;）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Once you add files to git, it will keep tracking them,  
# so we have to delete them and commit your deletion
git rm -r --cached .Rproj.user/**

# Commit the deleted files
git commit -m &amp;quot;Removed files....&amp;quot;

# now add it to the `.gitignore` and the files will be ignored
echo &amp;#39;.Rproj.user/**&amp;#39; &amp;gt; .gitignore&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;要点：&lt;code&gt;**&lt;/code&gt;表示文件夹。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;无法把本地repo推送到远程repo&#34; class=&#34;section level2&#34; number=&#34;5.4&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.4&lt;/span&gt; 无法把本地repo推送到远程repo&lt;/h2&gt;
&lt;p&gt;这种情形下，直接push会提示如下报错：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git error: failed to push some refs to &amp;#39;https://github.com/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;问题可能有多个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有进行远程设置。可以通过如下代码查看是否进行了远程设置。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# 正常情况下显示结果如下：
$git remote -v
myOrigin ssh://git@example.com:1234/myRepo.git (fetch)
myOrigin ssh://git@example.com:1234/myRepo.git (push)


# 否则就应该进行远程设置：
$git remote add origin ssh://git@example.com:1234/myRepo.git
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;然后再进行推送：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# origin是远端，master是本地分支
$git push origin master&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;可能还会报错，比如提示远端在本地前面。因此需要pull-merge-mergetool，来实现更新步骤。下面给出处理办法（&lt;a href=&#34;https://help.github.com/en/articles/dealing-with-non-fast-forward-errors&#34;&gt;参看Dealing with non-fast-forward errors&lt;/a&gt;）：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# 报错信息
 ! [rejected]        master -&amp;gt; master (non-fast-forward)
error: failed to push some refs to &amp;#39;git@github.com:huhuaping/netlify.git&amp;#39;
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: &amp;#39;git pull ...&amp;#39;) before pushing again.
hint: See the &amp;#39;Note about fast-forwards&amp;#39; in &amp;#39;git push --help&amp;#39; for details.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# 同步远端和本地
$ git pull origin master

# 如果显示冲突conflict，则利用合并工具处理
$ git mergetool
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;分支push找不到上游分支&#34; class=&#34;section level2&#34; number=&#34;5.5&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.5&lt;/span&gt; 分支push找不到上游分支&lt;/h2&gt;
&lt;p&gt;如果是本地新建分支，则需要设定上游分支，否则push就会报错：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 报错信息。
$ git push
fatal: The current branch dev has no upstream branch.
To push the current branch and set the remote as upstream, use&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;处理办法是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git push --set-upstream origin dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;回到远端状态&#34; class=&#34;section level2&#34; number=&#34;5.6&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.6&lt;/span&gt; 回到远端状态&lt;/h2&gt;
&lt;p&gt;回到远端状态（例如，本地已提交，但是push提示合并冲突时，想把本地pull为远端状态）。参看&lt;a href=&#34;https://stackoverflow.com/questions/5097456/throw-away-local-commits-in-git&#34;&gt;队长问答&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git reset --hard origin/&amp;lt;your branch&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;放弃本地的修改未提交&#34; class=&#34;section level2&#34; number=&#34;5.7&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.7&lt;/span&gt; 放弃本地的修改（未提交）&lt;/h2&gt;
&lt;p&gt;参看&lt;a href=&#34;https://stackoverflow.com/questions/52704/how-do-i-discard-unstaged-changes-in-git&#34;&gt;队长问答&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#删除remove所有untracked files
git clean -df

#清除clear 所有untracked files
git checkout -- .

#保存痕迹
git stash save --keep-index --include-untracked

# 不保存痕迹
git stash save --keep-index
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;git-查看commit历史&#34; class=&#34;section level2&#34; number=&#34;5.8&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.8&lt;/span&gt; git 查看commit历史&lt;/h2&gt;
&lt;p&gt;查看历史commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git log --pretty=oneline
git log --oneline --decorate --graph --all&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;删除已提交记录中的文件并添加到ignore列表&#34; class=&#34;section level2&#34; number=&#34;5.9&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.9&lt;/span&gt; 删除已提交记录中的文件并添加到ignore列表&lt;/h2&gt;
&lt;p&gt;参看&lt;a href=&#34;https://stackoverflow.com/questions/36185456/gitignored-files-still-shown-in-rstudio&#34;&gt;队长问答&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;First of all your files are already committed so you have to remove it from the repo:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;# Once you add files to git, it will keep tracking them,  
# so we have to delete them and commit your deletion
git rm -r --cached .Rproj.user/**

# Commit the deleted files
git commit -m &amp;quot;Removed files....&amp;quot;

# now add it to the `.gitignore` and the files will be ignored
echo &amp;#39;.Rproj.user/**&amp;#39; &amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>多工作设备下的git控制和使用</title>
      <link>https://huhuaping.netlify.app/2019/08/31/git-with-multiple-devices/</link>
      <pubDate>Sat, 31 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://huhuaping.netlify.app/2019/08/31/git-with-multiple-devices/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#明确自己git使用的安全环境&#34;&gt;明确自己git使用的安全环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#多设备git工作的基本流程&#34;&gt;多设备git工作的基本流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#两步验证下如何正确地clone远程repo&#34;&gt;两步验证下如何正确地clone远程repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#最后的忠告&#34;&gt;最后的忠告&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;明确自己git使用的安全环境&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;明确自己git使用的安全环境&lt;/h2&gt;
&lt;p&gt;github有多重安全条件，用户可以自行决定自己的安全等级。需要注意的是，在多台工作设备下，git需要确认不同设备的使用权限。因此，明确自己的安全环境是多设备工作的第一步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;是否开启两步验证。若开启，在一些重要的安全操作下（登陆账户或删除仓库），就需要获得实时动态密码（token）。动态密码的管理工具包括authy等。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;是否设定加密SSH。简单说，如果本地电脑采用SSH key来与服务器对话，就能省去繁复的账号密码输入过程。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;多设备git工作的基本流程&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;多设备git工作的基本流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;条件准备。主力设备A；新设备B；需要异端工作的sharerepo。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主力设备A：对sharerepo已完成工作进行push，上传到云端。add-commit-push三部曲。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新设备B：创建文件夹，并clone云端的sharerepo。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# 明确存放在本地的文件路径
$ cd /j/github/

# clone远程sharerepo到本地文件路径下
$ git clone https://github.com/huhuaping/sharerepo.git

# 进入本地sharerepo
$ cd ./sharerepo&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;工作设备下：pull-edit-add-commit-push 四部曲。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;两步验证下如何正确地clone远程repo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;两步验证下如何正确地clone远程repo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对于私有仓库，上述方法clone会提示错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;Repository not found. fatal: repository not found&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;github托管下，两步验证法要求对新设备B设定&lt;strong&gt;私有进入授权码&lt;/strong&gt;。github账号 ——&amp;gt;setting ——&amp;gt;Developer settings ——&amp;gt; personal access tokens ——&amp;gt; generate new token ——&amp;gt;勾选权限范围 ——&amp;gt; 复制授权码备用。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;gitbash中输入如下代码colone私有仓库&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# tokens 也就是上述复制备用的授权码。既不是github账户登录密码，也不是两步验证动态码！
$ git clone https://username:tokens@github.com/username/repo.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;最后的忠告&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;最后的忠告&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在任何终端设备上工作，最后都要记得对修改进行add-commit-push三部曲操作&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;云端永远保持最新状态！&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.deanbodenham.com/learn/using-git-to-sync-different-computers.html&#34;&gt;参考资料1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/25947059/git-clone-repository-not-found&#34;&gt;参考资料2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Netlify系列1：个人网站开发“三剑客” (blogdown;github;netlify)</title>
      <link>https://huhuaping.netlify.app/2019/02/21/three-sord/</link>
      <pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://huhuaping.netlify.app/2019/02/21/three-sord/</guid>
      <description>
&lt;script src=&#34;https://huhuaping.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#在rstudio中创建blogdown-site&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 在Rstudio中创建blogdown site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#利用git工具来管理github仓库&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; 利用git工具来管理github仓库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#在netlify上关联github仓库并建站&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; 在netlify上关联github仓库并建站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#额外的问题&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; 额外的问题&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#config.toml配置&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.1&lt;/span&gt; config.toml配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#版本控制github-repo下添加忽略文件&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.2&lt;/span&gt; 版本控制（github repo）下添加忽略文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#用addin插件更新内容&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.3&lt;/span&gt; 用addin插件更新内容&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#让博客文章post有目录节编号脚注&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.4&lt;/span&gt; 让博客文章(post)有目录、节编号、脚注&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#post文章里插入图片&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.5&lt;/span&gt; post文章里插入图片&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#参考资料&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; 参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;“三剑”合璧持续性打造个人网站(blogdown; github; netlify)。&lt;/p&gt;
&lt;div id=&#34;在rstudio中创建blogdown-site&#34; class=&#34;section level1&#34; number=&#34;1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 在Rstudio中创建blogdown site&lt;/h1&gt;
&lt;p&gt;blogdown的设置比较简单，教程里基本也说得清楚。具体操作时，还是需要注意以下几个要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选取中意的网站模板，比如学术型模板&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# for example, create a new site with the academic theme
blogdown::new_site(theme = &amp;quot;gcushen/hugo-academic&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个模板还内部支持&lt;a href=&#34;https://github.com/rstudio/blogdown/issues/36&#34;&gt;数学公式显示&lt;/a&gt;！需要在Rmarkdown文档的yaml区域里设置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;math: true&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;设置全局选项（global options）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个是设置默认的“作者”和“文件格式”。需要在工作目录下新建一个.Rprofile文件：&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;file.edit(&amp;#39;.Rprofile&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;文件里面的内容配置为:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;options(blogdown.ext = &amp;quot;.Rmd&amp;quot;, blogdown.author = &amp;quot;huhuaping&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另外就是要配置工作文件下的config.toml文件，主要就是修改网站的名字：&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Title of your site
title = &amp;quot;Huhuaping&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;最后要记得装载hugo，最重要得是弄清楚hugo_version（后面netlify建站时需要配置环境变量hugo_version，否则会&lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-netlify/&#34;&gt;报错255&lt;/a&gt;，二者应该要一致，且有最低版本要求）。在Rstudio里判明版本号的办法是：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 安装hugo
install_hugo()

# 判明版本号
blogdown::hugo_version()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;利用git工具来管理github仓库&#34; class=&#34;section level1&#34; number=&#34;2&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; 利用git工具来管理github仓库&lt;/h1&gt;
&lt;p&gt;git版本控制工具，还是需要学会的。这里就列出一个很好的参考学习资源吧——&lt;a href=&#34;https://git-scm.com/book/zh/v2&#34;&gt;git book(多国语言版)&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;在netlify上关联github仓库并建站&#34; class=&#34;section level1&#34; number=&#34;3&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; 在netlify上关联github仓库并建站&lt;/h1&gt;
&lt;p&gt;如前所述，这里很重要的一步就是要记得设置hugo_version的环境变量，版本号需要与blogdown里安装的版本号一致。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;额外的问题&#34; class=&#34;section level1&#34; number=&#34;4&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; 额外的问题&lt;/h1&gt;
&lt;div id=&#34;config.toml配置&#34; class=&#34;section level2&#34; number=&#34;4.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.1&lt;/span&gt; config.toml配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;baseurl存在的&lt;a href=&#34;https://github.com/rstudio/blogdown/issues/114&#34;&gt;斜杠问题&lt;/a&gt;，可能会影响netlify建站更新。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网页链接显示最好是稳定的。可以通过日期+slug的形式来固定，具体设置为：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;[permalinks]
  post = &amp;quot;/:year/:month/:day/:slug/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;版本控制github-repo下添加忽略文件&#34; class=&#34;section level2&#34; number=&#34;4.2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.2&lt;/span&gt; 版本控制（github repo）下添加忽略文件&lt;/h2&gt;
&lt;p&gt;记得在工作目录下的.gitignore里添加忽视文件（否则会影响netlify建站更新）。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;public/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此外，还会引起master和dev分支的合并冲突！！&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;用addin插件更新内容&#34; class=&#34;section level2&#34; number=&#34;4.3&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.3&lt;/span&gt; 用addin插件更新内容&lt;/h2&gt;
&lt;p&gt;提交新的博客文章(post)：最好使用Rstudio里Addin菜单中的New Post来写Rmd格式的博文。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;让博客文章post有目录节编号脚注&#34; class=&#34;section level2&#34; number=&#34;4.4&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.4&lt;/span&gt; 让博客文章(post)有目录、节编号、脚注&lt;/h2&gt;
&lt;p&gt;目录（toc）和节编号（number_sections）可以在rmardown文件yaml头里设置&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;output:
  blogdown::html_page:
    toc: true
    number_sections: true&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;脚注的写法。正文里直接在脚注位置添加&lt;code&gt;[^1]&lt;/code&gt;，并在rmarkdown最后进行对应的注释说明：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[^1]: [Headings with automatic numbering](https://github.com/rstudio/blogdown/issues/140)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;post文章里插入图片&#34; class=&#34;section level2&#34; number=&#34;4.5&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.5&lt;/span&gt; post文章里插入图片&lt;/h2&gt;
&lt;p&gt;有两种插入图片的办法。不论如何，图片源文件默认都是放在&lt;code&gt;static/&lt;/code&gt;文件夹下&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用markdown语言：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# 源文件默认在`static/`文件夹下
![](/img/facet-multiple-geom.png)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://huhuaping.netlify.app/img/facet-multiple-geom.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;markdown语言方法插入图片&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;或者采用函数 &lt;code&gt;knitr::include_graphics()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# 源文件默认在`static/`文件夹下
knitr::include_graphics(&amp;quot;/pic/facet-multiple-geom.png&amp;quot;, error = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-1&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://huhuaping.netlify.app/pic/facet-multiple-geom.png&#34; alt=&#34;include_graphics函数方法插入图片&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 4.1: include_graphics函数方法插入图片
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;参考资料&#34; class=&#34;section level1&#34; number=&#34;5&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;5&lt;/span&gt; 参考资料&lt;/h1&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/blogdown/issues/140&#34;&gt;Headings with automatic numbering&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/blogdown/issues/184#issuecomment-323073705&#34;&gt;knitr::include_graphics in blogdown&lt;/a&gt;&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
